# .clinerules (日本語版)

## プロジェクト概要
-   このリポジトリは、複数の npm パッケージとして配布され、TypeScript で開発されている pdfme ライブラリをホストしています。
-   ライブラリは、ブラウザと Node.js 環境の両方で機能する必要があります。
-   コアライブラリは、CJK フォントと SVG サポートを含む PDF レンダリングを処理するために、フォークされたバージョンの [pdf-lib](https://pdf-lib.js.org/) (@pdfme/pdf-lib) に依存しています。
-   公式ドキュメントは http://pdfme.com/ を参照しています。
-   コードベースには以下が含まれます:
    -   **packages** ディレクトリ: 以下のように分類されるメインライブラリが含まれています:
        1.  **@pdfme/generator, @pdfme/schemas, @pdfme/ui** – JSON テンプレートからの PDF 生成、およびテンプレート/UI の設計ツール。
        2.  **@pdfme/manipulator, @pdfme/converter** – PDF 操作ユーティリティ (マージ、分割、画像への変換など)。
        3.  **@pdfme/common** – 共通ロジックと共有型。
    -   **website** ディレクトリ: 公式ドキュメント用の Docusaurus ベースのサイト (https://pdfme.com/)。
    -   **playground** ディレクトリ: e2e テスト、デモ、および開発チェック用の React SPA。

## 開発ガイドライン

1.  **メンテナンスオーバーヘッドの最小化**
    -   厳密に必要な場合を除き、新しい依存関係を追加しないでください。依存関係を追加する場合は、強力な正当化を提供してください。
    -   可能な限り少ないコードを記述してください。不可欠でないコードは削除または統合してください。
    -   パッケージ間で共有される機能は **@pdfme/common** に再配置する必要があります。
    -   カバレッジのために本当に必要なテストのみを追加してください。冗長または些細なテストは避けてください。

2.  **関数とインターフェース**
    -   ユニットテストを容易にするために、副作用のない純粋関数を優先してください。
    -   関数は最小限に保ち、明確さとテスト可能性に重点を置いてください。
    -   公開関数またはインターフェースの変更は、ドキュメント (`website/docs` 以下) に反映する必要があります。

3.  **ブラウザと Node.js のサポート**
    -   すべてのライブラリがブラウザと Node.js の両方でシームレスに動作することを確認してください。

4.  **コードフォーマット**
    -   コミットに不要なフォーマット変更を含めないでください。
    -   プロジェクトの決定的なフォーマットツールとして、ルートレベルで `npm run prettier` を使用してください。

5.  **ビルドとテストの要件**
    -   変更をマージする前に、ルートレベルで `npm run build` と `npm run test` に合格してください。
    -   導入された変更が、どのパッケージの既存機能も破壊しないことを確認してください。

6.  **ドキュメントの一貫性**
    -   公開 API を変更または公開する場合は、`website/docs` の既存のドキュメントと矛盾がないことを確認してください。
    -   インターフェースの変更を反映するために、必要に応じてドキュメントを更新してください。

7.  **最小スコープの変更**
    -   PR とコミットは、最小の機能更新にスコープを限定してください。
    -   無関係なコードの追加や、関連のない変更のマージは控えてください。

## セキュリティとメンテナンス
-   多くのユーザーがこのコードを閲覧し利用するため、安全な実装に重点を置いてください。
-   機密ファイル (例: .env, 認証情報) は常に保護してください。
-   コード構成、アーキテクチャ、およびテストにおけるベストプラクティスに従ってください。

## Cline メモリバンク
-   Cline メモリバンクを使用して、プロジェクトのコンテキストと進捗を追跡してください。
-   メモリバンクは、以下の Markdown ファイルで構成されています:
    -   **projectbrief.md**: プロジェクトの範囲と目的を定義します。
    -   **productContext.md**: 解決される問題、機能、UX の目標。
    -   **activeContext.md**: 現在の作業の焦点、最近の変更、次のステップ。
    -   **systemPatterns.md**: アーキテクチャ、技術的決定、デザインパターン。
    -   **techContext.md**: 使用技術、開発セットアップ、制約。
    -   **progress.md**: 機能のステータス、残りの作業、現在のステータス。

## メモリバンク更新ガイドライン
-   新しいプロジェクトパターンを発見した場合
-   大幅な変更を実装した後
-   コンテキストの明確化が必要な場合
-   「update memory bank」コマンドが要求された場合 (すべてのファイルを確認)

## プロジェクトインテリジェンス
-   重要な実装パス: packages/ 内の各パッケージは、明確に定義された責務を持っています。
-   ユーザー設定とワークフロー: テンプレート設計と生成のための直感的な API を提供します。
-   プロジェクト固有のパターン: モジュール化されたパッケージ構造、最小限の依存関係。
-   既知の問題: 複雑な PDF レイアウトに関する制限、高度な PDF 機能の部分的なサポート。 